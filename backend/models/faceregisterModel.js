const path = require("path");
const fs = require("fs");

const uploadDir = path.join(__dirname, "./uploads");
let isCapturing = false; // Tr·∫°ng th√°i ƒëang ch·ª•p

// ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i tr∆∞·ªõc khi l∆∞u
const ensureUploadDirExists = () => {
  if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir);
    console.log("üìÇ T·∫°o l·∫°i th∆∞ m·ª•c uploads v√† kh·ªüi ƒë·ªông l·∫°i server...");
    restartServer();
  }
};

// H√†m kh·ªüi ƒë·ªông l·∫°i server
const restartServer = () => {
  console.log("üîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i server...");
  process.exit(0);
};

// Theo d√µi th∆∞ m·ª•c uploads
fs.watch(__dirname, (eventType, filename) => {
  if (eventType === "rename" && filename === "uploads") {
    console.log("‚ùå Th∆∞ m·ª•c uploads ƒë√£ b·ªã x√≥a ho·∫∑c ƒë·ªïi t√™n. T·∫°o l·∫°i v√† kh·ªüi ƒë·ªông l·∫°i server...");
    ensureUploadDirExists();
  }
});

// Ki·ªÉm tra th∆∞ m·ª•c m·ªói 5 gi√¢y
setInterval(ensureUploadDirExists, 5000);

// H√†m l∆∞u ·∫£nh
const saveImage = async (buffer, name) => {
  if (isCapturing) {
    console.log("‚è≥ ƒêang ch·ª•p ·∫£nh, vui l√≤ng ƒë·ª£i...");
    return;
  }

  isCapturing = true; // B·∫Øt ƒë·∫ßu qu√° tr√¨nh ch·ª•p

  ensureUploadDirExists();
  const fileName = `image_${(new Date().toLocaleString('en-US', { timeZone: 'Asia/Ho_Chi_Minh' })).replace(/[,: /]/g, '_')}_${name.replace(/\s+/g, "_")}.jpg`;
  const filePath = path.join(uploadDir, fileName);

  return new Promise((resolve, reject) => {
    fs.writeFile(filePath, buffer, (err) => {
      if (err) {
        isCapturing = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i n·∫øu l·ªói
        reject("L·ªói khi l∆∞u file!");
      } else {
        console.log(`‚úÖ ·∫¢nh ƒë√£ l∆∞u: ${filePath}`);
        setTimeout(() => {
          isCapturing = false; // ƒê·ª£i 500ms tr∆∞·ªõc khi cho ph√©p ch·ª•p ti·∫øp
        }, 500);
        resolve(`/uploads/${fileName}`);
      }
    });
  });
};

module.exports = { saveImage };
